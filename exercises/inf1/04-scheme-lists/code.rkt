#lang racket

; Наредена двойка - построяваме с cons
(cons 1 "asdf")

; Списък (индуктивно)
; 1) '() е списък
; 2) (head . tail) е списък <=> tail е списък

; Тоест списъка (1 2 3 4)
; Изглежда така (1 . (2 . (3 . (4 . '()))))
; (cons '() '()) = ?

; quote vs. list
; '(+ 1 2) = (list '+ '1 '2)

; Сравнения:
; =, eq?, eqv?, eqal?
; equal? може да сравнява списъци покомпонентно

(list? '())
(pair? '(1 2 3))
(null? '())
(pair? '())

; Композиция на car и cdr - съкратен синтаксис
'((1 2 (3)) 4)
(caar '((1 2 3) 4)) ; първият ел на първият ел.
(cadr (cons 1 (cons 2 (cons 3 '())))) ; = (car '(2 3))
; cadr <=> car . cdr - първо cdr после car
; (f . g)(x) = f(g(x)) - четем "f след g"

; Прилага f върху всеки елемент на списъка
(define (map f lst)
  (if (null? lst)
    '()
    (cons (f (car lst))
          (map f (cdr lst)))))

(map even? '(1 5 4 7 9 2))
;          '(#f #f #t #f #f #t)
